_Conf_puertos:
  begin   (midx: 0)
//TestServo.c,8 :: 		void Conf_puertos(void)
_Conf_puertos:
  begin   (midx: 0)
//TestServo.c,10 :: 		GPIO_Digital_Input(&GPIOA_BASE,_GPIO_PINMASK_2 | _GPIO_PINMASK_3);
	R1 <4> <- 12   (midx: 0)
	R0 <4> <- #GPIOA_BASE   (midx: 0)
	CALL _GPIO_Digital_Input   (midx: 0)
  end
   (midx: 0)
_main:
  begin   (midx: 0)
//TestServo.c,13 :: 		void main() {
_main:
  begin   (midx: 0)
//TestServo.c,14 :: 		Conf_puertos();
	CALL _Conf_puertos   (midx: 0)
//TestServo.c,16 :: 		current_duty = Cero;                        // initial value for current_duty
	R1 <2> <- 3900   (midx: 0)
	R0 <4> <- addr(_current_duty)   (midx: 0)
	FLOC_main+0 <4> <- R0   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
//TestServo.c,17 :: 		pwm_period1 = PWM_TIM2_Init(50);
	R0 <4> <- 50   (midx: 0)
	CALL _PWM_TIM2_Init   (midx: 0)
	R1 <4> <- addr(_pwm_period1)   (midx: 0)
	[R1] <2> <- R0   (midx: 0)
//TestServo.c,18 :: 		PWM_TIM2_Set_Duty(current_duty,  _PWM_NON_INVERTED, _PWM_CHANNEL2);
	R0 <4> <- FLOC_main+0   (midx: 0)
	R0 <4> <- R0   (midx: 0)
	R0 <2> <- [R0]   (midx: 0)
	R2 <1> <- 1   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _PWM_TIM2_Set_Duty   (midx: 0)
//TestServo.c,19 :: 		PWM_TIM2_Start(_PWM_CHANNEL2, &_GPIO_MODULE_TIM2_CH2_PA1);
	R1 <4> <- #__GPIO_MODULE_TIM2_CH2_PA1   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	CALL _PWM_TIM2_Start   (midx: 0)
//TestServo.c,21 :: 		while (1){
0:   (midx: 0)
//TestServo.c,23 :: 		if(GPIOA_IDR.B2 == 1 && GPIOA_IDR.B3 == 0){
	R1 <4> <- addr(GPIOA_IDR)   (midx: 0)
	R0 <4> <- [R1]   (midx: 0)
	if (!R0) then goto 21   (midx: 21)
	R1 <4> <- addr(GPIOA_IDR)   (midx: 0)
	R0 <4> <- [R1]   (midx: 0)
	if (R0) then goto 20   (midx: 21)
19:   (midx: 0)
//TestServo.c,24 :: 		if(current_duty <= Min){
	R0 <4> <- addr(_current_duty)   (midx: 0)
	R1 <2> <- [R0]   (midx: 0)
	R0 <4> <- 1700   (midx: 0)
	if ( R1 > R0) then goto 5   (midx: 1)
//TestServo.c,25 :: 		current_duty = Min;
	R1 <2> <- 1700   (midx: 0)
	R0 <4> <- addr(_current_duty)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
//TestServo.c,26 :: 		PWM_TIM2_Set_Duty(current_duty,  _PWM_NON_INVERTED, _PWM_CHANNEL2);
	R0 <2> <- 1700   (midx: 0)
	R2 <1> <- 1   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _PWM_TIM2_Set_Duty   (midx: 0)
//TestServo.c,27 :: 		PWM_TIM2_Start(_PWM_CHANNEL2, &_GPIO_MODULE_TIM2_CH2_PA1);
	R1 <4> <- #__GPIO_MODULE_TIM2_CH2_PA1   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	CALL _PWM_TIM2_Start   (midx: 0)
//TestServo.c,28 :: 		}
	goto	6   (midx: 0)
5:   (midx: 0)
//TestServo.c,30 :: 		Delay_ms(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//TestServo.c,31 :: 		current_duty = current_duty - 15;       // increment current_duty
	R1 <4> <- addr(_current_duty)   (midx: 0)
	R0 <2> <- [R1]   (midx: 0)
	R0 <2> <-  R0 - 15   (midx: 1)
	[R1] <2> <- R0   (midx: 0)
//TestServo.c,32 :: 		PWM_TIM2_Set_Duty(current_duty,  _PWM_NON_INVERTED, _PWM_CHANNEL2); /// set newly acquired duty ratio
	R0 <2> <- R0   (midx: 0)
	R2 <1> <- 1   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _PWM_TIM2_Set_Duty   (midx: 0)
//TestServo.c,33 :: 		PWM_TIM2_Start(_PWM_CHANNEL2, &_GPIO_MODULE_TIM2_CH2_PA1); //agregamos que haga el cambio cada vez presionado el boton
	R1 <4> <- #__GPIO_MODULE_TIM2_CH2_PA1   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	CALL _PWM_TIM2_Start   (midx: 0)
//TestServo.c,34 :: 		}
6:   (midx: 0)
//TestServo.c,35 :: 		}
	goto	8   (midx: 0)
//TestServo.c,23 :: 		if(GPIOA_IDR.B2 == 1 && GPIOA_IDR.B3 == 0){
21:   (midx: 0)
20:   (midx: 0)
//TestServo.c,37 :: 		else if(GPIOA_IDR.B2 == 0 && GPIOA_IDR.B3 == 1){
	R1 <4> <- addr(GPIOA_IDR)   (midx: 0)
	R0 <4> <- [R1]   (midx: 0)
	if (R0) then goto 23   (midx: 21)
	R1 <4> <- addr(GPIOA_IDR)   (midx: 0)
	R0 <4> <- [R1]   (midx: 0)
	if (!R0) then goto 22   (midx: 21)
18:   (midx: 0)
//TestServo.c,38 :: 		if(current_duty >= Max){
	R0 <4> <- addr(_current_duty)   (midx: 0)
	R1 <2> <- [R0]   (midx: 0)
	R0 <4> <- 6850   (midx: 0)
	if ( R1 < R0) then goto 12   (midx: 1)
//TestServo.c,39 :: 		current_duty = Max;
	R1 <2> <- 6850   (midx: 0)
	R0 <4> <- addr(_current_duty)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
//TestServo.c,40 :: 		PWM_TIM2_Set_Duty(current_duty,  _PWM_NON_INVERTED, _PWM_CHANNEL2);
	R0 <2> <- 6850   (midx: 0)
	R2 <1> <- 1   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _PWM_TIM2_Set_Duty   (midx: 0)
//TestServo.c,41 :: 		PWM_TIM2_Start(_PWM_CHANNEL2, &_GPIO_MODULE_TIM2_CH2_PA1);
	R1 <4> <- #__GPIO_MODULE_TIM2_CH2_PA1   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	CALL _PWM_TIM2_Start   (midx: 0)
//TestServo.c,42 :: 		}
	goto	13   (midx: 0)
12:   (midx: 0)
//TestServo.c,44 :: 		Delay_ms(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//TestServo.c,45 :: 		current_duty = current_duty + 15;       // increment current_duty
	R1 <4> <- addr(_current_duty)   (midx: 0)
	R0 <2> <- [R1]   (midx: 0)
	R0 <2> <-  R0 + 15   (midx: 1)
	[R1] <2> <- R0   (midx: 0)
//TestServo.c,46 :: 		PWM_TIM2_Set_Duty(current_duty,  _PWM_NON_INVERTED, _PWM_CHANNEL2); /// set newly acquired duty ratio
	R0 <2> <- R0   (midx: 0)
	R2 <1> <- 1   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _PWM_TIM2_Set_Duty   (midx: 0)
//TestServo.c,47 :: 		PWM_TIM2_Start(_PWM_CHANNEL2, &_GPIO_MODULE_TIM2_CH2_PA1); //agregamos que haga el cambio cada vez presionado el boton
	R1 <4> <- #__GPIO_MODULE_TIM2_CH2_PA1   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	CALL _PWM_TIM2_Start   (midx: 0)
//TestServo.c,48 :: 		}
13:   (midx: 0)
//TestServo.c,49 :: 		}
	goto	15   (midx: 0)
//TestServo.c,37 :: 		else if(GPIOA_IDR.B2 == 0 && GPIOA_IDR.B3 == 1){
23:   (midx: 0)
22:   (midx: 0)
//TestServo.c,53 :: 		Delay_ms(1);
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//TestServo.c,54 :: 		current_duty = Cero;                        // initial value for current_duty
	R1 <2> <- 3900   (midx: 0)
	R0 <4> <- addr(_current_duty)   (midx: 0)
	[R0] <2> <- R1   (midx: 0)
//TestServo.c,55 :: 		PWM_TIM2_Set_Duty(current_duty,  _PWM_NON_INVERTED, _PWM_CHANNEL2);
	R0 <2> <- 3900   (midx: 0)
	R2 <1> <- 1   (midx: 0)
	R1 <1> <- 0   (midx: 0)
	R0 <2> <- R0   (midx: 0)
	CALL _PWM_TIM2_Set_Duty   (midx: 0)
//TestServo.c,56 :: 		PWM_TIM2_Start(_PWM_CHANNEL2, &_GPIO_MODULE_TIM2_CH2_PA1);
	R1 <4> <- #__GPIO_MODULE_TIM2_CH2_PA1   (midx: 0)
	R0 <1> <- 1   (midx: 0)
	CALL _PWM_TIM2_Start   (midx: 0)
//TestServo.c,57 :: 		}
15:   (midx: 0)
8:   (midx: 0)
//TestServo.c,58 :: 		Delay_ms(1);                 // slow down change pace a little
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 2)
	asm: -1   (midx: 1)
	asm: -1   (midx: 5)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
	asm: -1   (midx: 1)
//TestServo.c,59 :: 		}
	goto	0   (midx: 0)
  end
   (midx: 0)
